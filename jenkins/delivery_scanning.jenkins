/*
delivery_scanning

Run from Vendor_build_onTag

Parameter:
- TAG

Checks out the following:
- vendor TAG

Action:
- Finds some files or so
- Performs scanning via remote host
*/

pipeline {
  agent any

  parameters {
    string(name: 'DeployVersion', defaultValue: 'p-a-03', description: 'Version of Software to scan')
  }

  stages {
    stage('Envs') {
      steps {
        echo '*************************************************************'
        echo 'Show me all ENVS here:'
        sh 'env'
        echo '*************************************************************'
        echo "Do we have this as Groovy Variable? ${DeployVersion}"
      }
    }
    stage('Init') {
      steps {
        sh 'echo "If this file is here, it is not cleaned up" > notcleanedup'
        echo 'Clean workspace'
        cleanWs()
        echo 'checkout k-vendor'
        dir ('vendor') {
          // checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://github.com/ylz/k-vendor.git']], 
          // branches: [[name: "releases/tags/${DeployVersion}"]]], poll: false
          // git branch: "refs/tags/${DeployVersion}", url: 'https://github.com/ylz/k-vendor.git'

          checkout([
            $class: 'GitSCM',
            branches: [[name: 'refs/tags/p-a-03']],
            userRemoteConfigs: [[url: 'https://github.com/ylz/k-vendor.git']]
          ])

          /*
          git url: 'https://github.com/ylz/k-vendor.git'
          sh "git checkout ${DeployVersion}"
          */
        }
      }
    }
    stage('Scan') {
      steps() {
        echo 'do da scan'
      }
    }
  }
}